name: CI / CD pipeline for CoinBuck

#on:
  #push:
    #branches: [ "main", "master" ]            # Trigger pipeline on main branch pushes

permissions:
  id-token: write                             # Needed for OIDC auth to Azure
  contents: read
  packages: write


env:
  IMAGE_NAME: coinbuck-app
  IMAGE_TAG: ${{ github.sha }}                # Use commit SHA as image tag
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  RESOURCE_GROUP: ${{ secrets.AZ_RG }}
  AKS_CLUSTER: ${{ secrets.AKS_CLUSTER }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: coinbuck-app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Azure Login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Log in to Azure Container Registry
      - name: Login to ACR
        run: az acr login --name ${{ secrets.ACR_NAME }}

      # Build Docker image
      - name: Build Docker Image
        run: |
          IMAGE_TAG=$(date +%s)
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:$IMAGE_TAG ./app

      # Push image to ACR
      - name: Push Image
        run: docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # Fetch AKS credentials for kubectl
      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group rg-coinbuck --name aks-coinbuck --overwrite-existing

      # Deploy to AKS
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/coinbuck-app coinbuck=${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          kubectl apply -f k8s/